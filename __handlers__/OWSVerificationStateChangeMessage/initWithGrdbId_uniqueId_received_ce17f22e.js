/*
 * Auto-generated by Frida. Please modify to match the signature of -[OWSVerificationStateChangeMessage initWithGrdbId:uniqueId:receivedAtTimestamp:sortId:timestamp:uniqueThreadId:attachmentIds:body:bodyRanges:contactShare:expireStartedAt:expiresAt:expiresInSeconds:giftBadge:isGroupStoryReply:isViewOnceComplete:isViewOnceMessage:linkPreview:messageSticker:quotedMessage:storedShouldStartExpireTimer:storyAuthorUuidString:storyReactionEmoji:storyTimestamp:wasRemotelyDeleted:customMessage:infoMessageUserInfo:messageType:read:unregisteredAddress:isLocalChange:recipientAddress:verificationState:].
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call -[OWSVerificationStateChangeMessage initWithGrdbId:uniqueId:receivedAtTimestamp:sortId:timestamp:uniqueThreadId:attachmentIds:body:bodyRanges:contactShare:expireStartedAt:expiresAt:expiresInSeconds:giftBadge:isGroupStoryReply:isViewOnceComplete:isViewOnceMessage:linkPreview:messageSticker:quotedMessage:storedShouldStartExpireTimer:storyAuthorUuidString:storyReactionEmoji:storyTimestamp:wasRemotelyDeleted:customMessage:infoMessageUserInfo:messageType:read:unregisteredAddress:isLocalChange:recipientAddress:verificationState:].
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    log(`-[OWSVerificationStateChangeMessage initWithGrdbId:${args[2]} uniqueId:${args[3]} receivedAtTimestamp:${args[4]} sortId:${args[5]} timestamp:${args[6]} uniqueThreadId:${args[7]} attachmentIds:${args[8]} body:${args[9]} bodyRanges:${args[10]} contactShare:${args[11]} expireStartedAt:${args[12]} expiresAt:${args[13]} expiresInSeconds:${args[14]} giftBadge:${args[15]} isGroupStoryReply:${args[16]} isViewOnceComplete:${args[17]} isViewOnceMessage:${args[18]} linkPreview:${args[19]} messageSticker:${args[20]} quotedMessage:${args[21]} storedShouldStartExpireTimer:${args[22]} storyAuthorUuidString:${args[23]} storyReactionEmoji:${args[24]} storyTimestamp:${args[25]} wasRemotelyDeleted:${args[26]} customMessage:${args[27]} infoMessageUserInfo:${args[28]} messageType:${args[29]} read:${args[30]} unregisteredAddress:${args[31]} isLocalChange:${args[32]} recipientAddress:${args[33]} verificationState:${args[34]}]`);
  },

  /**
   * Called synchronously when about to return from -[OWSVerificationStateChangeMessage initWithGrdbId:uniqueId:receivedAtTimestamp:sortId:timestamp:uniqueThreadId:attachmentIds:body:bodyRanges:contactShare:expireStartedAt:expiresAt:expiresInSeconds:giftBadge:isGroupStoryReply:isViewOnceComplete:isViewOnceMessage:linkPreview:messageSticker:quotedMessage:storedShouldStartExpireTimer:storyAuthorUuidString:storyReactionEmoji:storyTimestamp:wasRemotelyDeleted:customMessage:infoMessageUserInfo:messageType:read:unregisteredAddress:isLocalChange:recipientAddress:verificationState:].
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
  }
}
